const { cheltuiala, categorieCheltuiala, buget } = require("../models");
const { Op } = require("sequelize");
const jwt = require("jsonwebtoken");

const praguri = {
  alimente: 60,
  calatorii: 40,
  casa: 30,
  imbracaminte: 30,
  sanatate: 30,
  transport: 20,
  divertisment: 25,
  cadouri: 20,
};


const sfaturiMap = {
  alimente: [
    "Conform comportamentului t캒u financiar, categoria cu cea mai mare pondere este cea **alimentar캒**.",
    "C칙nd cheltuielile pe alimente dep캒탳esc **60%** din total, este un semnal de **alarm캒** financiar.",
    "*Cauze posibile*: cump캒r캒turi frecvente, risip캒 alimentar캒, lipsa unui plan de mese.",
    "*Recomandare*: planific캒 mesele s캒pt캒m칙nal 탳i mergi la cump캒r캒turi cu o list캒 bine stabilit캒.",
  ],
  calatorii: [
    "Cheltuielile pe **c캒l캒torii** reprezint캒 o parte considerabil캒 din bugetul t캒u.",
    "C칙nd cheltuielile pe c캒l캒torii dep캒탳esc *40%* din total, poate fi un semn c캒 sunt planificate impulsiv sau prea frecvent.",
    "Analizeaz캒 dac캒 toate c캒l캒toriile sunt necesare sau pot fi **reduse**.",
    "Folose탳te oferte, planific캒 din timp 탳i exploreaz캒 alternative locale pentru relaxare.",
  ],
  casa: [
    "Cheltuielile pentru **cas캒** ocup캒 un procent semnificativ din bugetul t캒u.",
    "Dep캒탳irea pragului de **30%** pe aceast캒 categorie poate indica lucr캒ri de 칥ntre탵inere sau achizi탵ii mari.",
    "*Recomandare*: stabile탳te un buget lunar separat pentru repara탵ii 탳i urm캒re탳te cheltuielile pe termen lung.",
    "Evit캒 achizi탵iile neprev캒zute 탳i prioritizeaz캒 investi탵iile utile 칥n confort 탳i eficien탵캒 energetic캒.",
  ],
  imbracaminte: [
    "Cheltuielile pe **칥mbr캒c캒minte** sunt mai mari dec칙t ar trebui.",
    "C칙nd dep캒탳esc **30%** din total, este un semnal de alarm캒.",
    "*Recomandare*: stabile탳te un buget lunar pentru 칥mbr캒c캒minte 탳i cump캒r캒 doar ce ai nevoie.",
    "Caut캒 reduceri, second-hand sau schimburi de haine cu prietenii. Astfel, po탵i economisi 탳i s캒 reduci risipa.游깵",
  ],
  sanatate: [
    "Cheltuielile pe **s캒n캒tate** sunt esen탵iale, dar trebuie gestionate cu aten탵ie.",
    "Dac캒 dep캒탳esc **30%** din total, poate fi un semnal c캒 ai cheltuieli medicale neprev캒zute sau costuri ridicate cu medicamentele.",
    "*Recomandare*: verific캒 dac캒 ai asigurare medical캒 adecvat캒 탳i exploreaz캒 op탵iuni de preven탵ie pentru a reduce cheltuielile pe termen lung.",
    "Planific캒 vizitele la medic 탳i investe탳te 칥n un stil de via탵캒 s캒n캒tos pentru a preveni problemele de s캒n캒tate.",
  ],
  transport: [
    "Cheltuielile pe **transport** sunt mai mari dec칙t ar trebui.",
    "C칙nd dep캒탳esc **20%** din total, este un semnal de alarm캒.",
    "*Recomandare*: analizeaz캒 dac캒 folose탳ti transportul 칥n comun, bicicleta sau ma탳ina personal캒 칥n mod eficient.",
    "Astfel de alternative pot reduce costurile 탳i impactul asupra mediului.游깵",
  ],  
  divertisment: [
  "Cheltuie탳ti mult pe **divertisment**. Este important s캒 te relaxezi 탳i s캒 te sim탵i bine, dar totul este bun cu m캒sur캒.",
  "Seteaz캒 un buget lunar clar pentru activit캒탵i recreative.",
  "*Recomandare*: caut캒 alternative gratuite sau mai ieftine.",
  "De exemplu, plimb캒ri 칥n natur캒, seri de jocuri cu prietenii sau filme acas캒.",
],
  cadouri: [
    "Cheltuielile pe **cadouri** sunt mai mari dec칙t ar trebui.",
    "C칙nd dep캒탳esc **20%** din total, este un semnal de alarm캒.",
    "*Recomandare*: stabile탳te un buget anual pentru cadouri 탳i 칥ncearc캒 s캒 칥l respec탵i.",
    "Cump캒r캒 cadouri din timp sau f캒-탵i timp s캒 creezi ceva personalizat.",
    "Amint캒-탵i c캒 gestul conteaz캒 mai mult dec칙t valoarea material캒 a cadoului.鮫봺잺",
  ],
};


// const genereazaSfaturi = async (req, res) => {
//   try {
//     const authHeader = req.headers.authorization;
//     if (!authHeader || !authHeader.startsWith("Bearer ")) {
//       return res.status(401).json({ message: "Token lips캒 sau invalid." });
//     }

//     const token = authHeader.split(" ")[1];
//     const decoded = jwt.verify(token, process.env.JWT_SECRET || "cheie-secreta");
//     const utilizatorId = decoded.id;

//     const cheltuieli = await cheltuiala.findAll({
//       where: { utilizator_id: utilizatorId },
//       include: { model: categorieCheltuiala,as: 'categorie_cheltuiala',attributes: ['denumire']}
//     });

//     const sfaturi = [];
//     const total = cheltuieli.reduce((acc, c) => acc + c.suma, 0);
//     const categorii = {};

//     // cheltuieli.forEach(c => {
//     // const cat = c.categorie_cheltuiala?.denumire?.toLowerCase();
//     // if (!cat) return;
//     //   if (!categorii[cat]) categorii[cat] = 0;
//     //   categorii[cat] += c.suma;
//     // });

//     cheltuieli.forEach(c => {
//       let cat = c.categorie_cheltuiala?.denumire?.toLowerCase().trim();
//       if (!cat) return;
//       if (!categorii[cat]) categorii[cat] = 0;
//       categorii[cat] += c.suma;
//     });


//     if (total === 0) {
//       return res.json({
//         sfaturi: [
//           "Momentan nu ai cheltuieli 칥nregistrate, deci nu putem genera recomand캒ri personalizate.",
//         ],
//       });
//     }

//     // Regula 1: procent categorie
// //    for (const categorie of Object.keys(categorii)) {
// //         const procent = (categorii[categorie] / total) * 100;
// //         if (praguri[categorie] && procent >= praguri[categorie]) {
// //             sfaturi.push(...(sfaturiMap[categorie] || []));
// //         }
// //     }

//     Object.entries(categorii).forEach(([categorie, suma]) => {
//     const procent = (suma / total) * 100;
//     if (praguri[categorie] && procent >= praguri[categorie]) {
//         console.log("Prag atins:", categorie);
//         console.log("cu procent:", procent);
//         sfaturi.push(...(sfaturiMap[categorie] || []));
//     } else {
//         console.log("Prag NEATINS:", categorie);
//         console.log("cu procent:", procent);
//     }

//     }); 

//     // Regula 2: tranzac탵ii frecvente
//     if (cheltuieli.length > 25) {
//       sfaturi.push("Ai un num캒r mare de tranzac탵ii. 칉ncearc캒 s캒 reduci cump캒r캒turile impulsive.");
//     }

//     // Regula 3: dep캒탳ire buget
//     const bugete = await buget.findAll({ where: { utilizator_id: utilizatorId } });

//     for (const buget of bugete) {
//       const cheltuieliInPerioada = cheltuieli.filter(c => {
//         const d = new Date(c.data);
//         return d >= buget.data_inceput && d <= buget.data_sfarsit;
//       });

//       const suma = cheltuieliInPerioada.reduce((acc, c) => acc + c.suma, 0);

//       if (suma > buget.suma_maxima) {
//         sfaturi.push(`Ai **dep캒탳it** bugetul "${buget.titlu}". Revizuie탳te cheltuielile din perioada respectiv캒.`);
//       }
//     }

//     // Regula 4: cre탳tere fa탵캒 de luna trecut캒
//     const azi = new Date();
//     const lunaCurenta = azi.getMonth();
//     const lunaTrecuta = lunaCurenta === 0 ? 11 : lunaCurenta - 1;

//     const cheltLunaCurenta = cheltuieli.filter(c => new Date(c.data).getMonth() === lunaCurenta);
//     const cheltLunaTrecuta = cheltuieli.filter(c => new Date(c.data).getMonth() === lunaTrecuta);

//     const totalCurent = cheltLunaCurenta.reduce((acc, c) => acc + c.suma, 0);
//     const totalTrecut = cheltLunaTrecuta.reduce((acc, c) => acc + c.suma, 0);

//     if (totalCurent > totalTrecut) {
//       sfaturi.push("Cheltuielile tale au **crescut** fa탵캒 de luna trecut캒. Analizeaz캒 dac캒 este justificat.");
//     }

//     if (sfaturi.length === 0) {
//         sfaturi.push("**Felicit캒ri!!!** Cheltuielile tale sunt echilibrate. Continu캒 s캒 monitorizezi 탳i s캒 planifici bugetul.");
//         sfaturi.push("Nu uita s캒 verifici sec탵iunea de recompense!");

//     }
    

//     res.json({ sfaturi });

//   } catch (error) {
//   console.error("Eroare la generarea sfaturilor:", error);  // DEJA EXISTENT
//   res.status(500).json({
//     message: "Eroare intern캒",
//     eroare: error.message,
//     stack: error.stack  // ca sa vad linia unde crapa
//   });
// }
// };

const genereazaSfaturi = async (req, res) => {
  try {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      return res.status(401).json({ message: "Token lips캒 sau invalid." });
    }

    const token = authHeader.split(" ")[1];
    const decoded = jwt.verify(token, process.env.JWT_SECRET || "cheie-secreta");
    const utilizatorId = decoded.id;

    const cheltuieli = await cheltuiala.findAll({
      where: { utilizator_id: utilizatorId },
      include: {
        model: categorieCheltuiala,
        as: 'categorie_cheltuiala',
        attributes: ['denumire']
      }
    });

    const sfaturi = [];

    // calculeaz캒 cheltuielile din ultima lun캒
    const azi = new Date();
    const dataCu30ZileInUrma = new Date();
    dataCu30ZileInUrma.setDate(azi.getDate() - 30);

    const cheltuieliLuna = cheltuieli.filter(c => new Date(c.data) >= dataCu30ZileInUrma);

    const total = cheltuieliLuna.reduce((acc, c) => acc + Number(c.suma), 0);
    const categorii = {};

    cheltuieliLuna.forEach(c => {
      let cat = c.categorie_cheltuiala?.denumire?.toLowerCase().trim();
      if (!cat) return;
      if (!categorii[cat]) categorii[cat] = 0;
      categorii[cat] += Number(c.suma);
    });

    if (total === 0) {
      return res.json({
        sfaturi: [
          "Momentan nu ai cheltuieli 칥nregistrate 칥n ultima lun캒, deci nu putem genera recomand캒ri personalizate.",
        ],
      });
    }

    // 游댷 Regula 1: procent categorie pe ultima lun캒
    Object.entries(categorii).forEach(([categorie, suma]) => {
      const procent = (suma / total) * 100;
      console.log("Categorie:", categorie, "Procent:", procent);
      if (praguri[categorie] && procent >= praguri[categorie]) {
        sfaturi.push(...(sfaturiMap[categorie] || []));
      }
    });

    // 游댷 Regula 2: tranzac탵ii frecvente (totale, nu doar luna)
    if (cheltuieli.length > 25) {
      sfaturi.push("Ai un num캒r mare de tranzac탵ii. 칉ncearc캒 s캒 reduci cump캒r캒turile impulsive.");
    }

    // 游댷 Regula 3: dep캒탳ire buget
    const bugete = await buget.findAll({ where: { utilizator_id: utilizatorId } });

    for (const buget of bugete) {
      const cheltuieliInPerioada = cheltuieli.filter(c => {
        const d = new Date(c.data);
        return d >= buget.data_inceput && d <= buget.data_sfarsit;
      });

      const suma = cheltuieliInPerioada.reduce((acc, c) => acc + Number(c.suma), 0);

      if (suma > buget.suma_maxima) {
        sfaturi.push(`Ai **dep캒탳it** bugetul "${buget.titlu}". Revizuie탳te cheltuielile din perioada respectiv캒.`);
      }
    }

    // 游댷 Regula 4: cre탳tere fa탵캒 de luna trecut캒
    const lunaCurenta = azi.getMonth();
    const lunaTrecuta = lunaCurenta === 0 ? 11 : lunaCurenta - 1;

    const cheltLunaCurenta = cheltuieli.filter(c => new Date(c.data).getMonth() === lunaCurenta);
    const cheltLunaTrecuta = cheltuieli.filter(c => new Date(c.data).getMonth() === lunaTrecuta);

    const totalCurent = cheltLunaCurenta.reduce((acc, c) => acc + Number(c.suma), 0);
    const totalTrecut = cheltLunaTrecuta.reduce((acc, c) => acc + Number(c.suma), 0);

    if (totalCurent > totalTrecut) {
      sfaturi.push("Cheltuielile tale au **crescut** fa탵캒 de luna trecut캒. Analizeaz캒 dac캒 este justificat.");
    }

    // 游댷 Fallback
    if (sfaturi.length === 0) {
      sfaturi.push("**Felicit캒ri!!!** Cheltuielile tale sunt echilibrate. Continu캒 s캒 monitorizezi 탳i s캒 planifici bugetul.");
      sfaturi.push("Nu uita s캒 verifici sec탵iunea de recompense!");
    }

    res.json({ sfaturi });

  } catch (error) {
    console.error("Eroare la generarea sfaturilor:", error);
    res.status(500).json({
      message: "Eroare intern캒",
      eroare: error.message,
      stack: error.stack
    });
  }
};


module.exports = { genereazaSfaturi };
